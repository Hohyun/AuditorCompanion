/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package compliance;

import compliance.Collector.DocLang;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.ja.JapaneseAnalyzer;
import org.apache.lucene.analysis.kr.KoreanAnalyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
/**
 *
 * @author hohkim
 */
public class Searcher extends javax.swing.JFrame {

    private String queryString;
    private String indexDir;
    private Page page;
    private int pageSize = 10;
    private MyTableModel model;
    private IndexReader reader;
    private IndexSearcher searcher;
    private Analyzer analyzer;
    private TopDocs topDocs;
    private Query query;
    
    /**
     * Creates new form Searcher
     */
    public Searcher() throws IOException {
        initComponents();
        setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        hSplitPane.setDividerLocation(450);
        setVisible(true);
    }
    
    public Searcher(String indexDir, DocLang docLang) throws IOException {
        this.indexDir = indexDir;
        initComponents();
        setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        hSplitPane.setDividerLocation(450);
        
        // IndexSearcher
        reader = IndexReader.open(FSDirectory.open(new File(this.indexDir)));
        searcher = new IndexSearcher(reader);
        // Analizer
        if (docLang == DocLang.English) {
            analyzer = new StandardAnalyzer(Version.LUCENE_36);
        } else if (docLang == DocLang.Korean) {
            try {
                analyzer = new KoreanAnalyzer(Version.LUCENE_36);
            } catch (IOException ex) {
               System.out.println(ex);
            }
        } else if (docLang == DocLang.Japanese) {
            analyzer = new JapaneseAnalyzer(Version.LUCENE_36);
        }        
        // Page initialize
        page = new Page(1);
        page.setPageSize(pageSize);
        setVisible(true);
    }

    public void initSearcher() {
        try {
            reader = IndexReader.open(FSDirectory.open(new File(this.indexDir)));
            searcher = new IndexSearcher(reader); 
        } catch (IOException e) {
            System.out.println(e);
        }       
        // Page initialize
        page = new Page(1);
        page.setPageSize(pageSize);
        //this.setIconImage(new ImageIcon("D:\\Software\\Icons\\audits.jpg").getImage());
        setNavigateButtonsDisable();  
        this.searchBotton.setEnabled(true);
        this.resetButton.setEnabled(true);
        resultTableColumnWidthAdjust();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        upperP = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchWords = new javax.swing.JTextArea();
        searchBotton = new javax.swing.JButton();
        indexInfoLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        midP = new javax.swing.JPanel();
        hSplitPane = new javax.swing.JSplitPane();
        midLeftPanel = new javax.swing.JPanel();
        midLeftBottomP = new javax.swing.JPanel();
        firstButton = new javax.swing.JButton();
        beforeButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        lastButton = new javax.swing.JButton();
        pageText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        pageLabel = new javax.swing.JLabel();
        tabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contentsArea = new javax.swing.JEditorPane();
        bottomP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuitem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        clearMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        deleteMenuitem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        howToUseMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Searcher");
        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        upperP.setBackground(new java.awt.Color(204, 204, 204));
        upperP.setForeground(new java.awt.Color(255, 102, 102));

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel2.setText("▶ 검색어");

        searchWords.setColumns(20);
        searchWords.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        searchWords.setRows(5);
        jScrollPane2.setViewportView(searchWords);

        searchBotton.setBackground(new java.awt.Color(204, 204, 204));
        searchBotton.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        searchBotton.setText("Search");
        searchBotton.setEnabled(false);
        searchBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBottonActionPerformed(evt);
            }
        });

        indexInfoLabel.setBackground(new java.awt.Color(204, 204, 204));
        indexInfoLabel.setForeground(new java.awt.Color(51, 153, 0));
        indexInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("(예) 합의 회의 가격 인상 저지 +필수단어 -제외단어");

        resetButton.setBackground(new java.awt.Color(204, 204, 204));
        resetButton.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        resetButton.setText("Reset");
        resetButton.setEnabled(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout upperPLayout = new javax.swing.GroupLayout(upperP);
        upperP.setLayout(upperPLayout);
        upperPLayout.setHorizontalGroup(
            upperPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, upperPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(upperPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(upperPLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBotton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                        .addComponent(indexInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        upperPLayout.setVerticalGroup(
            upperPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upperPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(upperPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchBotton)
                    .addComponent(jLabel4)
                    .addComponent(resetButton)
                    .addComponent(indexInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
        );

        mainPanel.add(upperP, java.awt.BorderLayout.PAGE_START);

        midP.setBackground(new java.awt.Color(204, 204, 204));
        midP.setPreferredSize(new java.awt.Dimension(1209, 600));

        hSplitPane.setBackground(new java.awt.Color(0, 153, 204));
        hSplitPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        hSplitPane.setDividerLocation(450);

        midLeftBottomP.setBackground(new java.awt.Color(204, 204, 204));

        firstButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/first.jpg"))); // NOI18N
        firstButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        firstButton.setEnabled(false);
        firstButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/first1.jpg"))); // NOI18N
        firstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstButtonActionPerformed(evt);
            }
        });

        beforeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/back.jpg"))); // NOI18N
        beforeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        beforeButton.setEnabled(false);
        beforeButton.setMaximumSize(new java.awt.Dimension(77, 57));
        beforeButton.setMinimumSize(new java.awt.Dimension(77, 57));
        beforeButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/back1.jpg"))); // NOI18N
        beforeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beforeButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/foward.jpg"))); // NOI18N
        nextButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51)));
        nextButton.setEnabled(false);
        nextButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/foward1.jpg"))); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        lastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/last.jpg"))); // NOI18N
        lastButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        lastButton.setEnabled(false);
        lastButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/compliance/images/last1.jpg"))); // NOI18N
        lastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastButtonActionPerformed(evt);
            }
        });

        pageText.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        pageText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pageText.setEnabled(false);
        pageText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout midLeftBottomPLayout = new javax.swing.GroupLayout(midLeftBottomP);
        midLeftBottomP.setLayout(midLeftBottomPLayout);
        midLeftBottomPLayout.setHorizontalGroup(
            midLeftBottomPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midLeftBottomPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firstButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(beforeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pageText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        midLeftBottomPLayout.setVerticalGroup(
            midLeftBottomPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, midLeftBottomPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(midLeftBottomPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(firstButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pageText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beforeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SQ", "Path", "File Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultTable);

        pageLabel.setBackground(new java.awt.Color(255, 153, 255));
        pageLabel.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        pageLabel.setText("Page:");

        javax.swing.GroupLayout midLeftPanelLayout = new javax.swing.GroupLayout(midLeftPanel);
        midLeftPanel.setLayout(midLeftPanelLayout);
        midLeftPanelLayout.setHorizontalGroup(
            midLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(midLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(midLeftPanelLayout.createSequentialGroup()
                        .addComponent(midLeftBottomP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
                .addContainerGap())
        );
        midLeftPanelLayout.setVerticalGroup(
            midLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(midLeftBottomP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        hSplitPane.setLeftComponent(midLeftPanel);

        tabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane1.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N

        contentsArea.setContentType("text/html"); // NOI18N
        jScrollPane3.setViewportView(contentsArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane1.addTab("Contents", jPanel1);

        hSplitPane.setRightComponent(tabbedPane1);

        javax.swing.GroupLayout midPLayout = new javax.swing.GroupLayout(midP);
        midP.setLayout(midPLayout);
        midPLayout.setHorizontalGroup(
            midPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hSplitPane)
                .addContainerGap())
        );
        midPLayout.setVerticalGroup(
            midPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hSplitPane)
                .addGap(0, 0, 0))
        );

        mainPanel.add(midP, java.awt.BorderLayout.CENTER);

        bottomP.setBackground(new java.awt.Color(204, 204, 204));
        bottomP.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Powered by Lucene");
        bottomP.add(jLabel1, java.awt.BorderLayout.CENTER);

        mainPanel.add(bottomP, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        openMenuitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuitem.setText("Open Index");
        openMenuitem.setActionCommand("Open Index");
        openMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuitemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuitem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Keyword");

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadMenuItem.setText("Load");
        jMenu2.add(loadMenuItem);

        clearMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        clearMenuItem.setText("Clear");
        clearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(clearMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        jMenu2.add(saveAsMenuItem);

        deleteMenuitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deleteMenuitem.setText("Delete");
        jMenu2.add(deleteMenuitem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        howToUseMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        howToUseMenuItem.setText("How to use");
        jMenu3.add(howToUseMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(aboutMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBottonActionPerformed
        // TODO add your handling code here:
        page.setCurrentPageNo(1);
        queryString = searchWords.getText();
        try {
            search();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_searchBottonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowClosed

    private void clearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuItemActionPerformed
        // TODO add your handling code here:
        resetButtonActionPerformed(evt);
    }//GEN-LAST:event_clearMenuItemActionPerformed

    private void openMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuitemActionPerformed
        // TODO add your handling code here:
        IndexOpenDialog dlg = new IndexOpenDialog(this, true);
        dlg.setLocation((this.getWidth()-dlg.getWidth())/2, 
                (this.getHeight()-dlg.getHeight())/2);
        dlg.setVisible(true);
    }//GEN-LAST:event_openMenuitemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Field Audtor's Companion for Korean Air\n"
                + "- Searcher\n"
                + "- Developed by H.H.Kim (SELBI)\n- Ver 1.0 (2012.11)");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        searchWords.setText("");
        contentsArea.setText("");
        pageText.setText("");
        initResultTable();
        setNavigateButtonsDisable();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        int row = resultTable.getSelectedRow();
        int id = (int) model.getValueAt(row, 0);
        if (evt.getClickCount() == 1) {
            // contents display
            ScoreDoc scoreDoc = topDocs.scoreDocs[id - 1];
            Document d;
            try {
                d = searcher.doc(scoreDoc.doc);
                String contents = d.get("contents");
                String[] fragments = MyUtil.getFragmentsWithHighlightedTerms(analyzer, query, "contents", contents, 100, 100);
                String highlighted = "";
                for (String frag : fragments) {
                    highlighted += frag;
                }
                contentsArea.setText(highlighted.replaceAll("\n", "<br/>"));
            } catch (CorruptIndexException ex) {
                System.out.println(ex);
            } catch (IOException ex) {
                System.out.println(ex);
            }
            contentsArea.setCaretPosition(0);
        } else if (evt.getClickCount() == 2) {
            // Open external program
            String path = (String) model.getValueAt(row, 1);
            File file;
            try {
                if (path.equals("..\\Files")) {
                    String docDir = indexDir.replace("Index", "Files");
                    String fn = (String) model.getValueAt(row, 2);
                    file = new File(docDir, fn);
                } else {
                    String fn = (String) model.getValueAt(row, 2);
                    file = new File(path, fn);
                }
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                System.out.println(ex);
                return;
            }
        }
    }//GEN-LAST:event_resultTableMouseClicked

    private void pageTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageTextActionPerformed
        int pageNo = page.getCurrentPageNo();
        try {
            pageNo = Integer.parseInt(pageText.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please input numbers.", "Numeric Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (pageNo < 1 || pageNo > page.getPageCount()) {
            JOptionPane.showMessageDialog(null, "Page range is out of bound.", "Page No Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        page.setCurrentPageNo(pageNo);
        try {
            search();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_pageTextActionPerformed

    private void lastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastButtonActionPerformed
        page.setCurrentPageNo(page.getPageCount());
        try {
            search();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_lastButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        page.setCurrentPageNo(page.getCurrentPageNo()+1);
        try {
            search();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void beforeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beforeButtonActionPerformed
        page.setCurrentPageNo(page.getCurrentPageNo()-1);
        try {
            search();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_beforeButtonActionPerformed

    private void firstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstButtonActionPerformed
        page.setCurrentPageNo(1);
        try {
            search();
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_firstButtonActionPerformed

    public void search () throws IOException {
        QueryParser parser = new QueryParser(Version.LUCENE_36, "contents", analyzer);
        try {
            query = parser.parse(queryString);
        } catch (ParseException ex) {
            System.out.println(ex);
        }
        
        //TopDocs docs = null;
        try {
            topDocs = searcher.search(query, page.getEnd());
        } catch (IOException ex) {
            Logger.getLogger(Searcher.class.getName()).log(Level.SEVERE, null, ex);
        }
        page.setTotalCount(topDocs.totalHits);
        System.out.format("Total hits: %d, Total Page: %d\n",
                topDocs.totalHits, page.getPageCount());

        System.out.println("Current page: " + page.getCurrentPageNo());
        // for tablemodel
        Object[][] data = new Object[page.getPageSize()][3];
        String[] columnNames = {"SQ", "Path", "File Name" };
        for (int i = page.getStart(); i < page.getEnd(); i++) {
            ScoreDoc scoreDoc = topDocs.scoreDocs[i];
            Document d = searcher.doc(scoreDoc.doc);
            System.out.format(" %3d. (%.5f) %s\n", i + 1, scoreDoc.score, d.get("filename"));
            //contents.append(String.format(" %3d. (%.5f) %s\n", i + 1, scoreDoc.score, d.get("filename")));
            data[i-page.getStart()][0] = i+1;
            data[i-page.getStart()][1] = d.get("path");
            data[i-page.getStart()][2] = d.get("filename");
        }
        pageLabel.setText(String.format("Page: %d/%d, (Total Hits: %d)", 
                page.getCurrentPageNo(), page.getPageCount(), page.getTotalCount()));
        model = new MyTableModel(data, columnNames);
        resultTable.setModel(model);
        resultTableColumnWidthAdjust();
        setNavigateButtonsState();
	}
    
    public void initResultTable() {
        Object[][] data = { {"", "", "" } };
        String[] columnNames = {"SQ", "Path", "File Name" };
        model = new MyTableModel(data, columnNames);
        resultTable.setModel(model);
        resultTableColumnWidthAdjust();
    }
    
    public void resultTableColumnWidthAdjust () {
        resultTable.getColumnModel().getColumn(0).setMaxWidth(40);
        resultTable.getColumnModel().getColumn(1).setPreferredWidth(160);
        resultTable.getColumnModel().getColumn(2).setPreferredWidth(250);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Searcher searcher = new Searcher("F:\\Binder\\Index", DocLang.Korean);
                    Searcher searcher = new Searcher();
                    Image icon = Toolkit.getDefaultToolkit().getImage(getClass()
                            .getResource("/compliance/images/search1.jpg"));
                    searcher.setIconImage(icon);
                    searcher.initResultTable();
                    searcher.setVisible(true);
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton beforeButton;
    private javax.swing.JPanel bottomP;
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JEditorPane contentsArea;
    private javax.swing.JMenuItem deleteMenuitem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton firstButton;
    private javax.swing.JSplitPane hSplitPane;
    private javax.swing.JMenuItem howToUseMenuItem;
    private javax.swing.JLabel indexInfoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton lastButton;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel midLeftBottomP;
    private javax.swing.JPanel midLeftPanel;
    private javax.swing.JPanel midP;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuitem;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JTextField pageText;
    private javax.swing.JButton resetButton;
    private javax.swing.JTable resultTable;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton searchBotton;
    private javax.swing.JTextArea searchWords;
    private javax.swing.JTabbedPane tabbedPane1;
    private javax.swing.JPanel upperP;
    // End of variables declaration//GEN-END:variables

    private void setNavigateButtonsState() {
        int curPage = page.getCurrentPageNo();
        if (curPage == 1) {  // first page
            firstButton.setEnabled(false);
            beforeButton.setEnabled(false);
            nextButton.setEnabled(true);
            lastButton.setEnabled(true);
            pageText.setEnabled(true);
        } else if (curPage == page.getPageCount()) { // last page
            firstButton.setEnabled(true);
            beforeButton.setEnabled(true);
            nextButton.setEnabled(false);
            lastButton.setEnabled(false);
            pageText.setEnabled(true);
        } else {
            firstButton.setEnabled(true);
            beforeButton.setEnabled(true);
            nextButton.setEnabled(true);
            lastButton.setEnabled(true);
            pageText.setEnabled(true);
        }
    }
    
    private void setNavigateButtonsDisable() {
        firstButton.setEnabled(false);
        beforeButton.setEnabled(false);
        nextButton.setEnabled(false);
        lastButton.setEnabled(false);
    }
    
    public void setIndexDir (String indexDir) {
        this.indexDir = indexDir;
    }
    
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }
    
    public void setAnalyzer (String language) {
        try {
            switch (language) {
                case "Korean":
                    analyzer = new KoreanAnalyzer(Version.LUCENE_36);
                    break;
                case "English":
                    analyzer = new StandardAnalyzer(Version.LUCENE_36);
                    break;
                case "Japanese":
                    analyzer = new JapaneseAnalyzer(Version.LUCENE_36);
                    break;
            }
        } catch (IOException e) {
            System.out.println(e);
            return;
        }
    }
    
    public void setIndexInfolabel(String info) {
        this.indexInfoLabel.setText(info);
    }
}
